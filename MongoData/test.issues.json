[{
  "_id": {
    "$oid": "661bb41268406a334f65320d"
  },
  "issueTitle": "浮点数精度问题",
  "issueContent": "<p>为什么 console.log(0.2+0.1==0.3) 得到的值为 false</p>",
  "scanNumber": 23,
  "commentNumber": 1,
  "issueStatus": true,
  "issueDate": "1713091602802",
  "userId": {
    "$oid": "6618c85e8c37c6f3487f1b2a"
  },
  "typeId": {
    "$oid": "65ec7a4de73c6cc63aed422a"
  }
},
{
  "_id": {
    "$oid": "661bb42868406a334f653212"
  },
  "issueTitle": "深浅拷贝",
  "issueContent": "<p>深拷贝和浅拷贝的区别？如何实现</p>",
  "scanNumber": 24,
  "commentNumber": 1,
  "issueStatus": true,
  "issueDate": "1713091624137",
  "userId": {
    "$oid": "6618c85e8c37c6f3487f1b2a"
  },
  "typeId": {
    "$oid": "65ec7a4de73c6cc63aed422a"
  }
},
{
  "_id": {
    "$oid": "661bb44568406a334f653217"
  },
  "issueTitle": "函数柯里化",
  "issueContent": "<p>什么是函数柯里化？</p>",
  "scanNumber": 24,
  "commentNumber": 1,
  "issueStatus": true,
  "issueDate": "1713091653767",
  "userId": {
    "$oid": "6618c85e8c37c6f3487f1b2a"
  },
  "typeId": {
    "$oid": "65ec7a4de73c6cc63aed422a"
  }
},
{
  "_id": {
    "$oid": "661bb45d68406a334f65321c"
  },
  "issueTitle": "事件循环",
  "issueContent": "<p>请简述一下 Node.js 中的事件循环，和浏览器环境的事件循环有何不同？</p>",
  "scanNumber": 26,
  "commentNumber": 1,
  "issueStatus": true,
  "issueDate": "1713091677966",
  "userId": {
    "$oid": "6618c85e8c37c6f3487f1b2a"
  },
  "typeId": {
    "$oid": "65ec7a4de73c6cc63aed422a"
  }
},
{
  "_id": {
    "$oid": "661bb47268406a334f653221"
  },
  "issueTitle": "闭包",
  "issueContent": "<p>闭包是什么？闭包的应用场景有哪些？怎么销毁闭包？</p>",
  "scanNumber": 22,
  "commentNumber": 1,
  "issueStatus": true,
  "issueDate": "1713091698239",
  "userId": {
    "$oid": "6618c85e8c37c6f3487f1b2a"
  },
  "typeId": {
    "$oid": "65ec7a4de73c6cc63aed422a"
  }
},
{
  "_id": {
    "$oid": "661bb4c068406a334f653226"
  },
  "issueTitle": "@Param作用",
  "issueContent": "<p>java中的@Param有什么用</p>",
  "scanNumber": 4,
  "commentNumber": 1,
  "issueStatus": true,
  "issueDate": "1713091776566",
  "userId": {
    "$oid": "6618c85e8c37c6f3487f1b2a"
  },
  "typeId": {
    "$oid": "65ec7a5de73c6cc63aed4232"
  }
},
{
  "_id": {
    "$oid": "661bb4e268406a334f65322b"
  },
  "issueTitle": "@Transition作用",
  "issueContent": "<p>java中的@Transition有什么用？</p>",
  "scanNumber": 8,
  "commentNumber": 1,
  "issueStatus": true,
  "issueDate": "1713091810151",
  "userId": {
    "$oid": "6618c85e8c37c6f3487f1b2a"
  },
  "typeId": {
    "$oid": "65ec7a5de73c6cc63aed4232"
  }
},
{
  "_id": {
    "$oid": "661bb50968406a334f653230"
  },
  "issueTitle": "打家劫舍 II",
  "issueContent": "<p>你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都 围成一圈 ，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警 。</p><p><br></p><p>给定一个代表每个房屋存放金额的非负整数数组，计算你 在不触动警报装置的情况下 ，今晚能够偷窃到的最高金额。</p><p><br></p><p>示例 1：</p><p><br></p><p>输入：nums = [2,3,2]</p><p>输出：3</p><p>解释：你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。</p><p>示例 2：</p><p><br></p><p>输入：nums = [1,2,3,1]</p><p>输出：4</p><p>解释：你可以先偷窃 1 号房屋（金额 = 1），然后偷窃 3 号房屋（金额 = 3）。</p><p>偷窃到的最高金额 = 1 + 3 = 4 。</p><p>示例 3：</p><p><br></p><p>输入：nums = [1,2,3]</p><p>输出：3</p>",
  "scanNumber": 11,
  "commentNumber": 2,
  "issueStatus": true,
  "issueDate": "1713091849136",
  "userId": {
    "$oid": "6618c85e8c37c6f3487f1b2a"
  },
  "typeId": {
    "$oid": "661b98338c37c6f3487f1b48"
  }
},
{
  "_id": {
    "$oid": "6673a09d8ca41b6104813369"
  },
  "issueTitle": "Promise静态方法",
  "issueContent": "<p>Promise静态方法有哪些？</p><h2>Q</h2>",
  "scanNumber": 2,
  "commentNumber": 0,
  "issueStatus": true,
  "issueDate": "1718853789836",
  "userId": {
    "$oid": "6618c85e8c37c6f3487f1b2a"
  },
  "typeId": {
    "$oid": "661bb71f68406a334f653354"
  }
}]